{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "type": "text",
      "version": 33,
      "versionNonce": 1772150751,
      "isDeleted": false,
      "id": "ECk7GmX6cG5ksabKOjZ8e",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 317.1111111111111,
      "y": 17,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 1057,
      "height": 675,
      "seed": 677130709,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1668178533410,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "I - string\no - boolean\nC - 1 <= s.length <= 104\n    s consists of parentheses only '()[]{}'.\nE - 1 charcter string\n\nE - Given a string of brackets, we will traverse the string in sets of two characters, and based on what\nthe first character is, if the second character matches its opposing bracket, then we will continue to\ntraverse down the string.  \n\nViz -\n\nA - \nif s.length is equal to 1,\n    return false\nelse\n    traverser through s in increments of 2 characters\n        if the first character is an open parenthesis\n            if second character is not a chlose parenthesis\n                return false\n            if the first character is an open bracket\n                if second character is not a chlose bracket\n                    return false\n            if the first character is an open curly\n                if second character is not a chlose curly\n                    return false\n    return true",
      "baseline": 668,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "I - string\no - boolean\nC - 1 <= s.length <= 104\n    s consists of parentheses only '()[]{}'.\nE - 1 charcter string\n\nE - Given a string of brackets, we will traverse the string in sets of two characters, and based on what\nthe first character is, if the second character matches its opposing bracket, then we will continue to\ntraverse down the string.  \n\nViz -\n\nA - \nif s.length is equal to 1,\n    return false\nelse\n    traverser through s in increments of 2 characters\n        if the first character is an open parenthesis\n            if second character is not a chlose parenthesis\n                return false\n            if the first character is an open bracket\n                if second character is not a chlose bracket\n                    return false\n            if the first character is an open curly\n                if second character is not a chlose curly\n                    return false\n    return true"
    },
    {
      "type": "text",
      "version": 431,
      "versionNonce": 625267089,
      "isDeleted": false,
      "id": "S3ntTuRk_5a_2zARTS_gF",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1960.999999999999,
      "y": 73.88888888888908,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 725,
      "height": 300,
      "seed": 391342037,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1668178533410,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "I - \nO -\nC - 1 <= s.length <= 104\n    s consists of parentheses only '()[]{}'. \nE - \n1. Open brackets Must be closed by SAME TYPE \n// ( } => false\n// ( ) => true\n2. Open brackets must be closed in the CORRECT ORDER.\n// ( [ ) ] => false \n// ( [ ] ) => true\n3. EVERY close bracket has a correponding OPEN bracket of same type ",
      "baseline": 293,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "I - \nO -\nC - 1 <= s.length <= 104\n    s consists of parentheses only '()[]{}'. \nE - \n1. Open brackets Must be closed by SAME TYPE \n// ( } => false\n// ( ) => true\n2. Open brackets must be closed in the CORRECT ORDER.\n// ( [ ) ] => false \n// ( [ ] ) => true\n3. EVERY close bracket has a correponding OPEN bracket of same type "
    },
    {
      "type": "text",
      "version": 2141,
      "versionNonce": 18741823,
      "isDeleted": false,
      "id": "nntvFuqdBGTSMcAvJw6Zp",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1941.3174603174612,
      "y": 425.61507936507945,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "width": 1196,
      "height": 768,
      "seed": 587074293,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1668178544413,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 3,
      "text": "E- \nFirst check if the string is less than or equal to 1 \n    if yes then return false\n\nNext we will create an object with a property for each of the different types of brackets.\nThe KEY will be the opening bracket and the VALUE will be the closing bracket.\nobj{\n    '(' : ')',\n    '[' : ']',\n    '{' : '}'\n}\n\nNext because of edge case #2 we will need to maintain order.\n We will create an array that will act as a stack. ( first in last out )\n\nlet stack = [];\n\n    Next we will traverse the string and check  \n\n// this is only for opening brackets                                   \nif the current bracket is found in the object ABOVE.\n     then we will push the current bracket's value into the stack\n\n// this only for closing brackets \nIf it is not in the obj \n    we pop from the stack and \n    Check the popped value against the value we get when we look up the current element within the obj\nIf they don't match return false\n \n    let temp = stack.pop()\n    temp !== obj[s[i]] => return false  \n",
      "baseline": 763,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "E- \nFirst check if the string is less than or equal to 1 \n    if yes then return false\n\nNext we will create an object with a property for each of the different types of brackets.\nThe KEY will be the opening bracket and the VALUE will be the closing bracket.\nobj{\n    '(' : ')',\n    '[' : ']',\n    '{' : '}'\n}\n\nNext because of edge case #2 we will need to maintain order.\n We will create an array that will act as a stack. ( first in last out )\n\nlet stack = [];\n\n    Next we will traverse the string and check  \n\n// this is only for opening brackets                                   \nif the current bracket is found in the object ABOVE.\n     then we will push the current bracket's value into the stack\n\n// this only for closing brackets \nIf it is not in the obj \n    we pop from the stack and \n    Check the popped value against the value we get when we look up the current element within the obj\nIf they don't match return false\n \n    let temp = stack.pop()\n    temp !== obj[s[i]] => return false  \n"
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}